name: CI Summary
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

permissions:
  actions: read
  contents: read

jobs:
  aggregate:
    if: ${{ github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    env:
      # Fail the job if coverage falls below this percent
      COVERAGE_MIN: "10"

    steps:
      - name: Download artifacts from triggering run
        uses: dawidd6/action-download-artifact@v2
        with:
          run_id: ${{ github.event.workflow_run.id }}
          # download ALL artifacts from the CI run
          path: artifacts
          if_no_artifact_found: warn

      - name: JUnit summary (fail job on failures/errors)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY' | tee -a "$GITHUB_STEP_SUMMARY"
import os, sys, xml.etree.ElementTree as ET

base = 'artifacts'
paths = []
for r, _, fs in os.walk(base):
    for fn in fs:
        if fn == 'junit.xml':
            paths.append(os.path.join(r, fn))

if not paths:
    print("JUnit: not found"); sys.exit(0)

T = F = E = S = 0
for p in paths:
    try:
        root = ET.parse(p).getroot()
    except Exception:
        continue
    for ts in root.iter('testsuite'):
        T += int(ts.get('tests')    or 0)
        F += int(ts.get('failures') or 0)
        E += int(ts.get('errors')   or 0)
        S += int(ts.get('skipped')  or 0)

print(f"JUnit: {T} tests, {F} failures, {E} errors, {S} skipped")
sys.exit(1 if F > 0 or E > 0 else 0)
PY

      - name: Coverage summary (aggregate all lcovs)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          files=(artifacts/**/lcov.info)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Line coverage: n/a" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          pct=$(awk -F, '/^DA:/{t++; if ($2>0) c++} END{ if(t) printf("%.2f",100*c/t); else print 0 }' "${files[@]}")
          echo "Line coverage: ${pct}%" | tee -a "$GITHUB_STEP_SUMMARY"
          awk -v p="$pct" -v min="${COVERAGE_MIN:-10}" 'BEGIN{ exit (p+0 >= min+0) ? 0 : 1 }'
