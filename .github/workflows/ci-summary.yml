name: CI Summary
on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "CI run id to aggregate"
        required: true

permissions:
  actions: read
  contents: read

jobs:
  aggregate:
    if: github.event.workflow_run.head_branch == 'main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      COVERAGE_MIN: "18"

    steps:
      - name: Download artifacts from triggering run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RID: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || inputs.run_id }}
        run: |
          set -euo pipefail
          mkdir -p artifacts
          if [ -z "${RID:-}" ]; then
            echo "No run_id to aggregate"; exit 1
          fi
          echo "Downloading artifacts from run_id=$RID"
          gh run download "$RID" -D artifacts || echo "No artifacts found"

      - name: JUnit summary (fail job on failures/errors)
        shell: bash
        run: |
          python3 - <<'PY' | tee -a "$GITHUB_STEP_SUMMARY"
import os, sys, xml.etree.ElementTree as ET
paths=[]
for r,_,fs in os.walk('artifacts'):
    for fn in fs:
        if fn=='junit.xml':
            paths.append(os.path.join(r,fn))
if not paths:
    print("JUnit: not found"); sys.exit(0)
T=F=E=S=0
for p in paths:
    try:
        root=ET.parse(p).getroot()
    except Exception:
        continue
    for ts in root.iter('testsuite'):
        T+=int(ts.get('tests') or 0)
        F+=int(ts.get('failures') or 0)
        E+=int(ts.get('errors') or 0)
        S+=int(ts.get('skipped') or 0)
print(f"JUnit: {T} tests, {F} failures, {E} errors, {S} skipped")
sys.exit(1 if F>0 or E>0 else 0)
PY

      - name: Coverage summary (aggregate all lcovs)
        shell: bash
        run: |
          shopt -s globstar nullglob
          files=(artifacts/**/lcov.info)
          if [ ${#files[@]} -eq 0 ]; then
            echo "Coverage: not found" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          pct=$(awk -F, '/^DA:/{t++; if ($2>0) c++} END{ if(t) printf("%.2f",100*c/t); else print 0 }' "${files[@]}")
          echo "Line coverage: ${pct}%" | tee -a "$GITHUB_STEP_SUMMARY"
          awk -v p="$pct" -v min="${COVERAGE_MIN:-18}" 'BEGIN{ exit (p+0 >= min+0) ? 0 : 1 }'
