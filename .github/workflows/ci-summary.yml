name: ci-summary

on:
  workflow_run:
    workflows: ["CI", "r5-smoke", "fuzz-smoke"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID to summarize"
        required: true
        type: string

jobs:
  summary:
    runs-on: ubuntu-latest
    env:
      # If we were triggered by workflow_run, use that id; otherwise use the manual input
      RUN_ID: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || inputs.run_id }}
    steps:
      - uses: actions/checkout@v4

      - name: Show context
        run: |
          echo "event=${{ github.event_name }}"
          echo "RUN_ID=$RUN_ID"

      - name: Ensure RUN_ID is set
        run: test -n "$RUN_ID"

      - name: Download artifacts (action)
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ github.token }}
          run_id: ${{ env.RUN_ID }}
          path: artifacts
          if_no_artifact_found: warn

      - name: Fallback download with gh
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh run download "$RUN_ID" --dir artifacts || true

      - name: Summarize junit + lcov
        run: |
          python3 - <<'PY'
          import os, xml.etree.ElementTree as ET
          tests=fail=err=skip=0; LF=LH=0
          for root,_,files in os.walk("artifacts"):
            for f in files:
              p=os.path.join(root,f)
              if f.endswith(".xml"):
                try:
                  ts=ET.parse(p).getroot()
                  if ts.tag=="testsuite":
                    tests+=int(ts.attrib.get("tests",0))
                    fail +=int(ts.attrib.get("failures",0))
                    err  +=int(ts.attrib.get("errors",0))
                    skip +=int(ts.attrib.get("skipped",0))
                except: pass
              if f in ("lcov.info",) or f.endswith((".lcov",".info")):
                with open(p) as fh:
                  for line in fh:
                    if line.startswith("LF:"): LF+=int(line[3:])
                    if line.startswith("LH:"): LH+=int(line[3:])
          cov = (100.0*LH/LF) if LF else 0.0
          print(f"JUnit: {tests} tests, {fail} failures, {err} errors, {skip} skipped")
          print(f"Coverage: {cov:.1f}% (LH={LH}, LF={LF})")
          PY
