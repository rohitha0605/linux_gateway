use opentelemetry::trace::{TraceContextExt, SpanContext, TraceId, SpanId, TraceFlags, TraceState, Tracer};
use crate::proto::TraceCtx;
use tracing_opentelemetry::OpenTelemetrySpanExt;      // Span::current().context()

pub fn current() -> Option<TraceCtx> {
    // First, try via tracing's current span
    let cx = tracing::Span::current().context();
    let sc_from_tracing = cx.span().span_context().clone();

    // If that isn't valid, fall back to OTEL's global Context
    let sc = if sc_from_tracing.is_valid() {
        sc_from_tracing
    } else {
        opentelemetry::Context::current().span().span_context().clone()
    };

    if !sc.is_valid() {
        return None;
    }
    Some(TraceCtx {
        trace_id: sc.trace_id().to_bytes().to_vec(),
        span_id:  sc.span_id().to_bytes().to_vec(),
        // mirror W3C sampled bit as 0/1
        flags: if sc.is_sampled() { 1 } else { 0 },
    })
}


/// Adopt a remote TraceCtx as the current OTEL context (creates a child span sharing the same trace_id).
pub fn enter_remote(t: Option<&crate::proto::TraceCtx>) -> Option<opentelemetry::ContextGuard> {
    let t = t?;
    // Defensive: pad/crop to exact OTEL sizes
    let mut tid = [0u8; 16];
    let mut sid = [0u8; 8];
    let n1 = core::cmp::min(16, t.trace_id.len());
    let n2 = core::cmp::min(8,  t.span_id.len());
    tid[..n1].copy_from_slice(&t.trace_id[..n1]);
    sid[..n2].copy_from_slice(&t.span_id[..n2]);

    let sc = SpanContext::new(
        TraceId::from_bytes(tid),
        SpanId::from_bytes(sid),
        if (t.flags & 1) != 0 { TraceFlags::SAMPLED } else { TraceFlags::default() },
        true, // is_remote
        TraceState::default(),
    );

    // Make a parent Context from the remote SpanContext
    let parent = opentelemetry::Context::current().with_remote_span_context(sc);

    // Start a local child span under that remote parent
    let tracer = opentelemetry::global::tracer("linux_gateway");
    let span = tracer.start_with_context("r5_compute", &parent);

    // Attach so crate::otel_trace::current() will read this span's span_context
    Some(opentelemetry::Context::current_with_span(span).attach())
}
